key,value
module/name,lib.trainers.WSIModuleV1
module/params/model/name,lib.models.wsi_resnets.Resnet_512x1x1
module/params/model/params/backbone,resnet18
module/params/model/params/backbone_features,512
module/params/model/params/classes,6
module/params/model/params/features_do,0
batch_size,64
dataset/dataloader,dummy
dataset/rgb_mean,"[[[[0.88]]

  [[0.76]]

  [[0.84]]]]"
dataset/rgb_std,"[[[[0.15]]

  [[0.26]]

  [[0.18]]]]"
dataset/classes,6
dataset/precalc_epochs,50
optimizer/name,torch.optim.Adam
optimizer/params/weight_decay,0.0001
loss/weights/reg,0.5
loss/weights/class,4.5
loss/label_smoothing,0.1
epochs,300
learning_rate,0.000375
scheduler/name,torch.optim.lr_scheduler.CosineAnnealingWarmRestarts
scheduler/params/T_0,3960
scheduler/params/T_mult,1
scheduler/interval,step
source_code,"import os, sys
sys.path.append(os.path.dirname(__file__))
import _default as d

d.epochs = 300
d.warmup_steps = 0

hparams = {
    'epochs': d.epochs,
    'learning_rate': 0.0015 * d.batch_size / 256,
    'optimizer': {
        'name': 'torch.optim.Adam',
        'params': {
            'weight_decay': 1e-4
        }
    },
    'scheduler': {
        'name': 'torch.optim.lr_scheduler.CosineAnnealingWarmRestarts',
        'params': {
            'T_0': 3960,
            'T_mult': 1
        },
        'interval': 'step'
    },
    'source_code': open(__file__, 'rt').read()
}

d.hparams.update(hparams)


def get_hrapams():
    return d.get_hrapams()


def update_hrapams(hparams, steps_in_epoh):
    return d.update_hrapams(hparams, steps_in_epoh)
"
steps_in_batch,132
